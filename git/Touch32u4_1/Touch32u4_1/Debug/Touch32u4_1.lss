
Touch32u4_1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000426  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000003b2  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000006  00800100  00800100  00000426  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000426  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000458  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000060  00000000  00000000  00000498  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000f3b  00000000  00000000  000004f8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000bef  00000000  00000000  00001433  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000004f5  00000000  00000000  00002022  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000b0  00000000  00000000  00002518  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000657  00000000  00000000  000025c8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000002f9  00000000  00000000  00002c1f  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000068  00000000  00000000  00002f18  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 56 00 	jmp	0xac	; 0xac <__ctors_end>
   4:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
   8:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
   c:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  10:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  14:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  18:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  1c:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  20:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  24:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  28:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  2c:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  30:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  34:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  38:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  3c:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  40:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  44:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  48:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  4c:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  50:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  54:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  58:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  5c:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  60:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  64:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  68:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  6c:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  70:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  74:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  78:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  7c:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  80:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  84:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  88:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  8c:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  90:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  94:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  98:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  9c:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  a0:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  a4:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  a8:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>

000000ac <__ctors_end>:
  ac:	11 24       	eor	r1, r1
  ae:	1f be       	out	0x3f, r1	; 63
  b0:	cf ef       	ldi	r28, 0xFF	; 255
  b2:	da e0       	ldi	r29, 0x0A	; 10
  b4:	de bf       	out	0x3e, r29	; 62
  b6:	cd bf       	out	0x3d, r28	; 61

000000b8 <__do_clear_bss>:
  b8:	21 e0       	ldi	r18, 0x01	; 1
  ba:	a0 e0       	ldi	r26, 0x00	; 0
  bc:	b1 e0       	ldi	r27, 0x01	; 1
  be:	01 c0       	rjmp	.+2      	; 0xc2 <.do_clear_bss_start>

000000c0 <.do_clear_bss_loop>:
  c0:	1d 92       	st	X+, r1

000000c2 <.do_clear_bss_start>:
  c2:	a6 30       	cpi	r26, 0x06	; 6
  c4:	b2 07       	cpc	r27, r18
  c6:	e1 f7       	brne	.-8      	; 0xc0 <.do_clear_bss_loop>
  c8:	0e 94 5d 01 	call	0x2ba	; 0x2ba <main>
  cc:	0c 94 d7 01 	jmp	0x3ae	; 0x3ae <_exit>

000000d0 <__bad_interrupt>:
  d0:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000d4 <_Z11touch_setupv>:
	return ADC;
}
 
 void pwmOut(int8_t pwmv)
 {
 		OCR1A = pwmv;
  d4:	80 e4       	ldi	r24, 0x40	; 64
  d6:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7e007c>
  da:	84 ec       	ldi	r24, 0xC4	; 196
  dc:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
  e0:	10 92 7b 00 	sts	0x007B, r1	; 0x80007b <__TEXT_REGION_LENGTH__+0x7e007b>
  e4:	ea e7       	ldi	r30, 0x7A	; 122
  e6:	f0 e0       	ldi	r31, 0x00	; 0
  e8:	80 81       	ld	r24, Z
  ea:	86 fd       	sbrc	r24, 6
  ec:	fd cf       	rjmp	.-6      	; 0xe8 <_Z11touch_setupv+0x14>
  ee:	08 95       	ret

000000f0 <_Z11touch_probehhb>:
  f0:	21 e0       	ldi	r18, 0x01	; 1
  f2:	30 e0       	ldi	r19, 0x00	; 0
  f4:	f9 01       	movw	r30, r18
  f6:	08 2e       	mov	r0, r24
  f8:	02 c0       	rjmp	.+4      	; 0xfe <_Z11touch_probehhb+0xe>
  fa:	ee 0f       	add	r30, r30
  fc:	ff 1f       	adc	r31, r31
  fe:	0a 94       	dec	r0
 100:	e2 f7       	brpl	.-8      	; 0xfa <_Z11touch_probehhb+0xa>
 102:	06 2e       	mov	r0, r22
 104:	02 c0       	rjmp	.+4      	; 0x10a <_Z11touch_probehhb+0x1a>
 106:	22 0f       	add	r18, r18
 108:	33 1f       	adc	r19, r19
 10a:	0a 94       	dec	r0
 10c:	e2 f7       	brpl	.-8      	; 0x106 <_Z11touch_probehhb+0x16>
 10e:	92 2f       	mov	r25, r18
 110:	9e 2b       	or	r25, r30
 112:	50 b3       	in	r21, 0x10	; 16
 114:	59 2b       	or	r21, r25
 116:	50 bb       	out	0x10, r21	; 16
 118:	44 23       	and	r20, r20
 11a:	31 f0       	breq	.+12     	; 0x128 <_Z11touch_probehhb+0x38>
 11c:	31 b3       	in	r19, 0x11	; 17
 11e:	e0 95       	com	r30
 120:	e3 23       	and	r30, r19
 122:	2e 2b       	or	r18, r30
 124:	21 bb       	out	0x11, r18	; 17
 126:	05 c0       	rjmp	.+10     	; 0x132 <_Z11touch_probehhb+0x42>
 128:	31 b3       	in	r19, 0x11	; 17
 12a:	20 95       	com	r18
 12c:	23 23       	and	r18, r19
 12e:	e2 2b       	or	r30, r18
 130:	e1 bb       	out	0x11, r30	; 17
 132:	60 64       	ori	r22, 0x40	; 64
 134:	ec e7       	ldi	r30, 0x7C	; 124
 136:	f0 e0       	ldi	r31, 0x00	; 0
 138:	60 83       	st	Z, r22
 13a:	af e1       	ldi	r26, 0x1F	; 31
 13c:	be e4       	ldi	r27, 0x4E	; 78
 13e:	11 97       	sbiw	r26, 0x01	; 1
 140:	f1 f7       	brne	.-4      	; 0x13e <_Z11touch_probehhb+0x4e>
 142:	00 c0       	rjmp	.+0      	; 0x144 <_Z11touch_probehhb+0x54>
 144:	00 00       	nop
 146:	20 b3       	in	r18, 0x10	; 16
 148:	90 95       	com	r25
 14a:	29 23       	and	r18, r25
 14c:	20 bb       	out	0x10, r18	; 16
 14e:	21 b3       	in	r18, 0x11	; 17
 150:	92 23       	and	r25, r18
 152:	91 bb       	out	0x11, r25	; 17
 154:	80 64       	ori	r24, 0x40	; 64
 156:	80 83       	st	Z, r24
 158:	8f e1       	ldi	r24, 0x1F	; 31
 15a:	9e e4       	ldi	r25, 0x4E	; 78
 15c:	01 97       	sbiw	r24, 0x01	; 1
 15e:	f1 f7       	brne	.-4      	; 0x15c <_Z11touch_probehhb+0x6c>
 160:	00 c0       	rjmp	.+0      	; 0x162 <_Z11touch_probehhb+0x72>
 162:	00 00       	nop
 164:	ea e7       	ldi	r30, 0x7A	; 122
 166:	f0 e0       	ldi	r31, 0x00	; 0
 168:	80 81       	ld	r24, Z
 16a:	80 64       	ori	r24, 0x40	; 64
 16c:	80 83       	st	Z, r24
 16e:	80 81       	ld	r24, Z
 170:	86 fd       	sbrc	r24, 6
 172:	fd cf       	rjmp	.-6      	; 0x16e <_Z11touch_probehhb+0x7e>
 174:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7e0078>
 178:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7e0079>
 17c:	08 95       	ret

0000017e <_Z8adcSetuph>:
 17e:	94 b1       	in	r25, 0x04	; 4
 180:	21 e0       	ldi	r18, 0x01	; 1
 182:	30 e0       	ldi	r19, 0x00	; 0
 184:	02 c0       	rjmp	.+4      	; 0x18a <_Z8adcSetuph+0xc>
 186:	22 0f       	add	r18, r18
 188:	33 1f       	adc	r19, r19
 18a:	8a 95       	dec	r24
 18c:	e2 f7       	brpl	.-8      	; 0x186 <_Z8adcSetuph+0x8>
 18e:	20 95       	com	r18
 190:	92 23       	and	r25, r18
 192:	94 b9       	out	0x04, r25	; 4
 194:	85 b1       	in	r24, 0x05	; 5
 196:	28 23       	and	r18, r24
 198:	25 b9       	out	0x05, r18	; 5
 19a:	08 95       	ret

0000019c <_Z7adcReadh>:
 19c:	ec e7       	ldi	r30, 0x7C	; 124
 19e:	f0 e0       	ldi	r31, 0x00	; 0
 1a0:	90 81       	ld	r25, Z
 1a2:	90 7f       	andi	r25, 0xF0	; 240
 1a4:	90 83       	st	Z, r25
 1a6:	90 81       	ld	r25, Z
 1a8:	89 2b       	or	r24, r25
 1aa:	80 83       	st	Z, r24
 1ac:	ea e7       	ldi	r30, 0x7A	; 122
 1ae:	f0 e0       	ldi	r31, 0x00	; 0
 1b0:	80 81       	ld	r24, Z
 1b2:	80 64       	ori	r24, 0x40	; 64
 1b4:	80 83       	st	Z, r24
 1b6:	80 81       	ld	r24, Z
 1b8:	86 fd       	sbrc	r24, 6
 1ba:	fd cf       	rjmp	.-6      	; 0x1b6 <_Z7adcReadh+0x1a>
 1bc:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7e0078>
 1c0:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7e0079>
 1c4:	08 95       	ret

000001c6 <_Z4loopv>:
 }

 uint8_t loop(void) 
 {	 
 1c6:	cf 93       	push	r28
 1c8:	df 93       	push	r29
 1ca:	c4 e0       	ldi	r28, 0x04	; 4
 1cc:	d0 e0       	ldi	r29, 0x00	; 0
	 // 4 measurements are taken and averaged to improve noise immunity
	 for (int i=0; i<4; i++) {
		 // first measurement: charge touch probe, discharge ADC s&h cap, connect the two, measure the voltage
		 adc1+= touch_probe(TPIN1, TPIN2, false); // accumulate the results for the averaging
 1ce:	40 e0       	ldi	r20, 0x00	; 0
 1d0:	61 e0       	ldi	r22, 0x01	; 1
 1d2:	80 e0       	ldi	r24, 0x00	; 0
 1d4:	0e 94 78 00 	call	0xf0	; 0xf0 <_Z11touch_probehhb>
 1d8:	20 91 04 01 	lds	r18, 0x0104	; 0x800104 <adc1>
 1dc:	30 91 05 01 	lds	r19, 0x0105	; 0x800105 <adc1+0x1>
 1e0:	82 0f       	add	r24, r18
 1e2:	93 1f       	adc	r25, r19
 1e4:	90 93 05 01 	sts	0x0105, r25	; 0x800105 <adc1+0x1>
 1e8:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <adc1>

		 // second measurement:discharge touch probe, charge ADC s&h cap, connect the two, measure the voltage
		 adc2+= touch_probe(TPIN1, TPIN2, true); // accumulate the results for the averaging
 1ec:	41 e0       	ldi	r20, 0x01	; 1
 1ee:	61 e0       	ldi	r22, 0x01	; 1
 1f0:	80 e0       	ldi	r24, 0x00	; 0
 1f2:	0e 94 78 00 	call	0xf0	; 0xf0 <_Z11touch_probehhb>
 1f6:	20 91 02 01 	lds	r18, 0x0102	; 0x800102 <adc2>
 1fa:	30 91 03 01 	lds	r19, 0x0103	; 0x800103 <adc2+0x1>
 1fe:	82 0f       	add	r24, r18
 200:	93 1f       	adc	r25, r19
 202:	90 93 03 01 	sts	0x0103, r25	; 0x800103 <adc2+0x1>
 206:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <adc2>
 20a:	21 97       	sbiw	r28, 0x01	; 1
 }

 uint8_t loop(void) 
 {	 
	 // 4 measurements are taken and averaged to improve noise immunity
	 for (int i=0; i<4; i++) {
 20c:	01 f7       	brne	.-64     	; 0x1ce <_Z4loopv+0x8>
	 }
	 adc1>>=2; // divide the accumulated measurements by 16
	 adc2>>=2;

	 // resulting raw touch value
	 probe_val= adc1-adc2; // the value of adc1 (probe charged) gets higher when the probe its touched, the value of adc2 (s&h charged) gets lower when the probe is touched, so, it has to be be subtracted to amplify the detection accuracy
 20e:	20 91 04 01 	lds	r18, 0x0104	; 0x800104 <adc1>
 212:	30 91 05 01 	lds	r19, 0x0105	; 0x800105 <adc1+0x1>
 216:	36 95       	lsr	r19
 218:	27 95       	ror	r18
 21a:	36 95       	lsr	r19
 21c:	27 95       	ror	r18
 21e:	96 95       	lsr	r25
 220:	87 95       	ror	r24
 222:	96 95       	lsr	r25
 224:	87 95       	ror	r24
 226:	a9 01       	movw	r20, r18
 228:	48 1b       	sub	r20, r24
 22a:	59 0b       	sbc	r21, r25
 22c:	ca 01       	movw	r24, r20
 22e:	50 93 01 01 	sts	0x0101, r21	; 0x800101 <_edata+0x1>
 232:	40 93 00 01 	sts	0x0100, r20	; 0x800100 <_edata>
 236:	8b 55       	subi	r24, 0x5B	; 91
 238:	9f 4f       	sbci	r25, 0xFF	; 255
 23a:	12 f4       	brpl	.+4      	; 0x240 <_Z4loopv+0x7a>
 23c:	80 e0       	ldi	r24, 0x00	; 0
 23e:	90 e0       	ldi	r25, 0x00	; 0
	 
	 // calculate the index to the LED fading table
	 int16_t idx= (probe_val-TOUCH_VALUE_BASELINE); // offset probe_val by value of untouched probe
	 if(idx<0) idx= 0; // limit the index!!!
	 idx/= TOUCH_VALUE_SCALE; // scale the index
 240:	65 e0       	ldi	r22, 0x05	; 5
 242:	70 e0       	ldi	r23, 0x00	; 0
 244:	0e 94 af 01 	call	0x35e	; 0x35e <__divmodhi4>
	 if(idx>31) idx= 31; // limit the index!!!
	 
	 adc1= 0; // clear the averaging variables for the next run
 248:	10 92 05 01 	sts	0x0105, r1	; 0x800105 <adc1+0x1>
 24c:	10 92 04 01 	sts	0x0104, r1	; 0x800104 <adc1>
	 adc2= 0;
 250:	10 92 03 01 	sts	0x0103, r1	; 0x800103 <adc2+0x1>
 254:	10 92 02 01 	sts	0x0102, r1	; 0x800102 <adc2>

	 return idx;	// 0..31	 
 258:	86 2f       	mov	r24, r22
 25a:	97 2f       	mov	r25, r23
 25c:	80 32       	cpi	r24, 0x20	; 32
 25e:	91 05       	cpc	r25, r1
 260:	14 f0       	brlt	.+4      	; 0x266 <_Z4loopv+0xa0>
 262:	8f e1       	ldi	r24, 0x1F	; 31
 264:	90 e0       	ldi	r25, 0x00	; 0
 }
 266:	df 91       	pop	r29
 268:	cf 91       	pop	r28
 26a:	08 95       	ret

0000026c <_Z11pwmSetStateh>:

 void pwmSetState(uint8_t tristate)
 {
	TCCR1A |= _BV(COM1A1) | _BV(WGM10);
 26c:	e0 e8       	ldi	r30, 0x80	; 128
 26e:	f0 e0       	ldi	r31, 0x00	; 0
 270:	90 81       	ld	r25, Z
 272:	91 68       	ori	r25, 0x81	; 129
 274:	90 83       	st	Z, r25

	if (tristate)
 276:	88 23       	and	r24, r24
 278:	59 f0       	breq	.+22     	; 0x290 <_Z11pwmSetStateh+0x24>
	{
		DDRB &= ~_BV(PB5);	// set mode input
 27a:	25 98       	cbi	0x04, 5	; 4
		PORTB &= ~_BV(PB5);	// disable pullups
 27c:	2d 98       	cbi	0x05, 5	; 5
		TCCR1B &= ~_BV(CS10+CS12);
 27e:	e1 e8       	ldi	r30, 0x81	; 129
 280:	f0 e0       	ldi	r31, 0x00	; 0
 282:	80 81       	ld	r24, Z
 284:	8b 7f       	andi	r24, 0xFB	; 251
 286:	80 83       	st	Z, r24
		TCCR1B |= _BV(WGM12);
 288:	80 81       	ld	r24, Z
 28a:	88 60       	ori	r24, 0x08	; 8
 28c:	80 83       	st	Z, r24
 28e:	08 95       	ret
	}
	else
	{
		DDRB |= _BV(PB5);
 290:	25 9a       	sbi	0x04, 5	; 4
		PORTB |= _BV(PB5);	// enable pullups
 292:	2d 9a       	sbi	0x05, 5	; 5
		TCCR1B |= _BV(CS10+CS12) | _BV(WGM12);
 294:	e1 e8       	ldi	r30, 0x81	; 129
 296:	f0 e0       	ldi	r31, 0x00	; 0
 298:	80 81       	ld	r24, Z
 29a:	8c 60       	ori	r24, 0x0C	; 12
 29c:	80 83       	st	Z, r24
 29e:	08 95       	ret

000002a0 <_Z8pwmSetupv>:

	/**
	 * We will be using OCR1A as our PWM output which is the
	 * same pin as PBx.
	 */
	DDRB |= _BV(PB5);
 2a0:	25 9a       	sbi	0x04, 5	; 4
	PORTB &= ~_BV(PB5);	// disable pullups
 2a2:	2d 98       	cbi	0x05, 5	; 5
	 * a compare value (which will be explained below).  CS10 being
	 * set simply turns the timer on without a prescaler (so at full
	 * speed).  The timer is used to determine when the PWM pin should be
	 * on and when it should be off.
	 */
	TCCR1A |= _BV(COM1A1) | _BV(WGM10);
 2a4:	e0 e8       	ldi	r30, 0x80	; 128
 2a6:	f0 e0       	ldi	r31, 0x00	; 0
 2a8:	80 81       	ld	r24, Z
 2aa:	81 68       	ori	r24, 0x81	; 129
 2ac:	80 83       	st	Z, r24
	TCCR1B |= _BV(CS10+CS12) | _BV(WGM12);
 2ae:	e1 e8       	ldi	r30, 0x81	; 129
 2b0:	f0 e0       	ldi	r31, 0x00	; 0
 2b2:	80 81       	ld	r24, Z
 2b4:	8c 60       	ori	r24, 0x0C	; 12
 2b6:	80 83       	st	Z, r24
 2b8:	08 95       	ret

000002ba <main>:
        _delay_ms(250);
        PORTB = 0b00000000; // set 7th bit to LOW
        _delay_ms(500);
    }
	*/
	adcSetup(7);
 2ba:	87 e0       	ldi	r24, 0x07	; 7
 2bc:	0e 94 bf 00 	call	0x17e	; 0x17e <_Z8adcSetuph>
	touch_setup();
 2c0:	0e 94 6a 00 	call	0xd4	; 0xd4 <_Z11touch_setupv>
	pwmSetup();
 2c4:	0e 94 50 01 	call	0x2a0	; 0x2a0 <_Z8pwmSetupv>

int main(void)
{
	uint8_t outputEnabled;

	outputEnabled = 5;
 2c8:	15 e0       	ldi	r17, 0x05	; 5
	return ADC;
}
 
 void pwmOut(int8_t pwmv)
 {
 		OCR1A = pwmv;
 2ca:	0f 2e       	mov	r0, r31
 2cc:	f8 e8       	ldi	r31, 0x88	; 136
 2ce:	ef 2e       	mov	r14, r31
 2d0:	f1 2c       	mov	r15, r1
 2d2:	f0 2d       	mov	r31, r0
 2d4:	00 e0       	ldi	r16, 0x00	; 0

	while(1)
	{
		uint16_t adcv;

		if (loop() > 5)
 2d6:	0e 94 e3 00 	call	0x1c6	; 0x1c6 <_Z4loopv>
 2da:	86 30       	cpi	r24, 0x06	; 6
 2dc:	68 f1       	brcs	.+90     	; 0x338 <main+0x7e>
		{
			adcv = 0;
			adcv += adcRead(7) & 0x3FF;
 2de:	87 e0       	ldi	r24, 0x07	; 7
 2e0:	0e 94 ce 00 	call	0x19c	; 0x19c <_Z7adcReadh>
 2e4:	ec 01       	movw	r28, r24
			adcv += adcRead(7) & 0x3FF;
 2e6:	87 e0       	ldi	r24, 0x07	; 7
 2e8:	0e 94 ce 00 	call	0x19c	; 0x19c <_Z7adcReadh>
 2ec:	d3 70       	andi	r29, 0x03	; 3
 2ee:	93 70       	andi	r25, 0x03	; 3
 2f0:	c8 0f       	add	r28, r24
 2f2:	d9 1f       	adc	r29, r25
			adcv = adcv / 2;
			
			if (((adcv >> 3) & 0x7) > 0)
 2f4:	d2 95       	swap	r29
 2f6:	c2 95       	swap	r28
 2f8:	cf 70       	andi	r28, 0x0F	; 15
 2fa:	cd 27       	eor	r28, r29
 2fc:	df 70       	andi	r29, 0x0F	; 15
 2fe:	cd 27       	eor	r28, r29
 300:	ce 01       	movw	r24, r28
 302:	87 70       	andi	r24, 0x07	; 7
 304:	99 27       	eor	r25, r25
 306:	89 2b       	or	r24, r25
 308:	69 f0       	breq	.+26     	; 0x324 <main+0x6a>
			{
				if (!outputEnabled)
 30a:	11 11       	cpse	r17, r1
 30c:	04 c0       	rjmp	.+8      	; 0x316 <main+0x5c>
				{
					pwmSetState(0);
 30e:	80 2f       	mov	r24, r16
 310:	0e 94 36 01 	call	0x26c	; 0x26c <_Z11pwmSetStateh>
					outputEnabled = 1;
 314:	11 e0       	ldi	r17, 0x01	; 1
	return ADC;
}
 
 void pwmOut(int8_t pwmv)
 {
 		OCR1A = pwmv;
 316:	0c 2e       	mov	r0, r28
 318:	00 0c       	add	r0, r0
 31a:	dd 0b       	sbc	r29, r29
 31c:	f7 01       	movw	r30, r14
 31e:	d1 83       	std	Z+1, r29	; 0x01
 320:	c0 83       	st	Z, r28
 322:	13 c0       	rjmp	.+38     	; 0x34a <main+0x90>
				//pwmOut(ledFadeTable[adcv]);
				pwmOut(adcv >> 3);
			}
			else
			{
				if (outputEnabled)
 324:	11 23       	and	r17, r17
 326:	19 f0       	breq	.+6      	; 0x32e <main+0x74>
				{
					pwmSetState(1);
 328:	81 e0       	ldi	r24, 0x01	; 1
 32a:	0e 94 36 01 	call	0x26c	; 0x26c <_Z11pwmSetStateh>
	return ADC;
}
 
 void pwmOut(int8_t pwmv)
 {
 		OCR1A = pwmv;
 32e:	f7 01       	movw	r30, r14
 330:	11 82       	std	Z+1, r1	; 0x01
 332:	10 82       	st	Z, r1
 334:	10 2f       	mov	r17, r16
 336:	09 c0       	rjmp	.+18     	; 0x34a <main+0x90>
				pwmOut(0);
			}
		}
		else
		{
			if (outputEnabled)
 338:	11 23       	and	r17, r17
 33a:	19 f0       	breq	.+6      	; 0x342 <main+0x88>
			{
				pwmSetState(1);
 33c:	81 e0       	ldi	r24, 0x01	; 1
 33e:	0e 94 36 01 	call	0x26c	; 0x26c <_Z11pwmSetStateh>
	return ADC;
}
 
 void pwmOut(int8_t pwmv)
 {
 		OCR1A = pwmv;
 342:	f7 01       	movw	r30, r14
 344:	11 82       	std	Z+1, r1	; 0x01
 346:	10 82       	st	Z, r1
 348:	10 2f       	mov	r17, r16
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 34a:	ff ef       	ldi	r31, 0xFF	; 255
 34c:	20 e7       	ldi	r18, 0x70	; 112
 34e:	82 e0       	ldi	r24, 0x02	; 2
 350:	f1 50       	subi	r31, 0x01	; 1
 352:	20 40       	sbci	r18, 0x00	; 0
 354:	80 40       	sbci	r24, 0x00	; 0
 356:	e1 f7       	brne	.-8      	; 0x350 <main+0x96>
 358:	00 c0       	rjmp	.+0      	; 0x35a <main+0xa0>
 35a:	00 00       	nop
 35c:	bc cf       	rjmp	.-136    	; 0x2d6 <main+0x1c>

0000035e <__divmodhi4>:
 35e:	97 fb       	bst	r25, 7
 360:	07 2e       	mov	r0, r23
 362:	16 f4       	brtc	.+4      	; 0x368 <__divmodhi4+0xa>
 364:	00 94       	com	r0
 366:	07 d0       	rcall	.+14     	; 0x376 <__divmodhi4_neg1>
 368:	77 fd       	sbrc	r23, 7
 36a:	09 d0       	rcall	.+18     	; 0x37e <__divmodhi4_neg2>
 36c:	0e 94 c3 01 	call	0x386	; 0x386 <__udivmodhi4>
 370:	07 fc       	sbrc	r0, 7
 372:	05 d0       	rcall	.+10     	; 0x37e <__divmodhi4_neg2>
 374:	3e f4       	brtc	.+14     	; 0x384 <__divmodhi4_exit>

00000376 <__divmodhi4_neg1>:
 376:	90 95       	com	r25
 378:	81 95       	neg	r24
 37a:	9f 4f       	sbci	r25, 0xFF	; 255
 37c:	08 95       	ret

0000037e <__divmodhi4_neg2>:
 37e:	70 95       	com	r23
 380:	61 95       	neg	r22
 382:	7f 4f       	sbci	r23, 0xFF	; 255

00000384 <__divmodhi4_exit>:
 384:	08 95       	ret

00000386 <__udivmodhi4>:
 386:	aa 1b       	sub	r26, r26
 388:	bb 1b       	sub	r27, r27
 38a:	51 e1       	ldi	r21, 0x11	; 17
 38c:	07 c0       	rjmp	.+14     	; 0x39c <__udivmodhi4_ep>

0000038e <__udivmodhi4_loop>:
 38e:	aa 1f       	adc	r26, r26
 390:	bb 1f       	adc	r27, r27
 392:	a6 17       	cp	r26, r22
 394:	b7 07       	cpc	r27, r23
 396:	10 f0       	brcs	.+4      	; 0x39c <__udivmodhi4_ep>
 398:	a6 1b       	sub	r26, r22
 39a:	b7 0b       	sbc	r27, r23

0000039c <__udivmodhi4_ep>:
 39c:	88 1f       	adc	r24, r24
 39e:	99 1f       	adc	r25, r25
 3a0:	5a 95       	dec	r21
 3a2:	a9 f7       	brne	.-22     	; 0x38e <__udivmodhi4_loop>
 3a4:	80 95       	com	r24
 3a6:	90 95       	com	r25
 3a8:	bc 01       	movw	r22, r24
 3aa:	cd 01       	movw	r24, r26
 3ac:	08 95       	ret

000003ae <_exit>:
 3ae:	f8 94       	cli

000003b0 <__stop_program>:
 3b0:	ff cf       	rjmp	.-2      	; 0x3b0 <__stop_program>
