
Touch32u4_1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  0000041e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000003aa  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000007  00800100  00800100  0000041e  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000041e  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000450  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000060  00000000  00000000  00000490  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000ea8  00000000  00000000  000004f0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000b9c  00000000  00000000  00001398  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000004ed  00000000  00000000  00001f34  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000bc  00000000  00000000  00002424  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000063b  00000000  00000000  000024e0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000033f  00000000  00000000  00002b1b  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000050  00000000  00000000  00002e5a  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 56 00 	jmp	0xac	; 0xac <__ctors_end>
   4:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
   8:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
   c:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  10:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  14:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  18:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  1c:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  20:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  24:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  28:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  2c:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  30:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  34:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  38:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  3c:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  40:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  44:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  48:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  4c:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  50:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  54:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  58:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  5c:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  60:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  64:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  68:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  6c:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  70:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  74:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  78:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  7c:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  80:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  84:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  88:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  8c:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  90:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  94:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  98:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  9c:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  a0:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  a4:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  a8:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>

000000ac <__ctors_end>:
  ac:	11 24       	eor	r1, r1
  ae:	1f be       	out	0x3f, r1	; 63
  b0:	cf ef       	ldi	r28, 0xFF	; 255
  b2:	da e0       	ldi	r29, 0x0A	; 10
  b4:	de bf       	out	0x3e, r29	; 62
  b6:	cd bf       	out	0x3d, r28	; 61

000000b8 <__do_clear_bss>:
  b8:	21 e0       	ldi	r18, 0x01	; 1
  ba:	a0 e0       	ldi	r26, 0x00	; 0
  bc:	b1 e0       	ldi	r27, 0x01	; 1
  be:	01 c0       	rjmp	.+2      	; 0xc2 <.do_clear_bss_start>

000000c0 <.do_clear_bss_loop>:
  c0:	1d 92       	st	X+, r1

000000c2 <.do_clear_bss_start>:
  c2:	a7 30       	cpi	r26, 0x07	; 7
  c4:	b2 07       	cpc	r27, r18
  c6:	e1 f7       	brne	.-8      	; 0xc0 <.do_clear_bss_loop>
  c8:	0e 94 a6 01 	call	0x34c	; 0x34c <main>
  cc:	0c 94 d3 01 	jmp	0x3a6	; 0x3a6 <_exit>

000000d0 <__bad_interrupt>:
  d0:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000d4 <_Z11pwmSetStateh>:

void pwmOut(int8_t pwmv)
{
  // Fire OCRA with a value 0..255
  //
  OCR1A = pwmv;
  d4:	91 e8       	ldi	r25, 0x81	; 129
  d6:	90 93 80 00 	sts	0x0080, r25	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
  da:	88 23       	and	r24, r24
  dc:	51 f0       	breq	.+20     	; 0xf2 <_Z11pwmSetStateh+0x1e>
  de:	25 98       	cbi	0x04, 5	; 4
  e0:	2d 98       	cbi	0x05, 5	; 5
  e2:	88 e0       	ldi	r24, 0x08	; 8
  e4:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
  e8:	10 92 89 00 	sts	0x0089, r1	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
  ec:	10 92 88 00 	sts	0x0088, r1	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
  f0:	08 95       	ret
  f2:	25 9a       	sbi	0x04, 5	; 4
  f4:	2d 9a       	sbi	0x05, 5	; 5
  f6:	8c e0       	ldi	r24, 0x0C	; 12
  f8:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
  fc:	08 95       	ret

000000fe <_Z7adcReadh>:
  // the binary representations of the numbers of the pins so we can
  // just 'OR' the pin's number with ADMUX to select that pin.
  // We first zero the four bits by setting ADMUX equal to its higher
  // four bits. 
  //
  ADMUX = (ADMUX & 0xf8) | (adcx & 0x7);
  fe:	ec e7       	ldi	r30, 0x7C	; 124
 100:	f0 e0       	ldi	r31, 0x00	; 0
 102:	90 81       	ld	r25, Z
 104:	98 7f       	andi	r25, 0xF8	; 248
 106:	87 70       	andi	r24, 0x07	; 7
 108:	89 2b       	or	r24, r25
 10a:	80 83       	st	Z, r24
  
  // This starts the conversion. 
  //
  ADCSRA |= _BV(ADSC);
 10c:	ea e7       	ldi	r30, 0x7A	; 122
 10e:	f0 e0       	ldi	r31, 0x00	; 0
 110:	80 81       	ld	r24, Z
 112:	80 64       	ori	r24, 0x40	; 64
 114:	80 83       	st	Z, r24
  // is finished.  It constantly checks ADCSRA's ADSC bit, which we just
  // set above, to see if it is still set.  This bit is automatically
  // reset (zeroed) when the conversion is ready so if we do this in
  // a loop the loop will just go until the conversion is ready. 
  //
  while ( (ADCSRA & _BV(ADSC)) );
 116:	80 81       	ld	r24, Z
 118:	86 fd       	sbrc	r24, 6
 11a:	fd cf       	rjmp	.-6      	; 0x116 <_Z7adcReadh+0x18>
  
  // Finally, we return the converted value to the calling function. 
  //
  return ADC;
 11c:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7e0078>
 120:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7e0079>
}
 124:	08 95       	ret

00000126 <_Z8adcSetuph>:
//
void adcSetup(uint8_t adcx)
{
  // from: http://www.elecrom.com/avr-tutorial-2-avr-input-output/
  //
  SLIDER_DDR = ~_BV(adcx);   // Setup to input
 126:	21 e0       	ldi	r18, 0x01	; 1
 128:	30 e0       	ldi	r19, 0x00	; 0
 12a:	02 c0       	rjmp	.+4      	; 0x130 <_Z8adcSetuph+0xa>
 12c:	22 0f       	add	r18, r18
 12e:	33 1f       	adc	r19, r19
 130:	8a 95       	dec	r24
 132:	e2 f7       	brpl	.-8      	; 0x12c <_Z8adcSetuph+0x6>
 134:	20 95       	com	r18
 136:	20 bb       	out	0x10, r18	; 16
  SLIDER_PORT = ~_BV(adcx);  // Go into tri-state mode
 138:	21 bb       	out	0x11, r18	; 17

  // from: http://maxembedded.com/2011/06/the-adc-of-the-avr/
  // AREF = AVcc
  ADMUX = _BV(REFS0);
 13a:	80 e4       	ldi	r24, 0x40	; 64
 13c:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7e007c>
  // ADC Enable and prescaler of 128
  // 16000000/16 = 250K
  //
  // NOTE: Need to decide if the scaler here is the best choice.
  //
  ADCSRA = _BV(ADEN) | _BV(ADPS2)  | _BV(ADPS1) ;
 140:	86 e8       	ldi	r24, 0x86	; 134
 142:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
  ADCSRB = 0x0 ;
 146:	10 92 7b 00 	sts	0x007B, r1	; 0x80007b <__TEXT_REGION_LENGTH__+0x7e007b>
 14a:	08 95       	ret

0000014c <_Z10touchProbehhb>:
//
uint16_t touchProbe(uint8_t pin, uint8_t partner, bool dir) 
{
  uint8_t mask;

  mask = _BV(pin) | _BV(partner);
 14c:	21 e0       	ldi	r18, 0x01	; 1
 14e:	30 e0       	ldi	r19, 0x00	; 0
 150:	f9 01       	movw	r30, r18
 152:	08 2e       	mov	r0, r24
 154:	02 c0       	rjmp	.+4      	; 0x15a <_Z10touchProbehhb+0xe>
 156:	ee 0f       	add	r30, r30
 158:	ff 1f       	adc	r31, r31
 15a:	0a 94       	dec	r0
 15c:	e2 f7       	brpl	.-8      	; 0x156 <_Z10touchProbehhb+0xa>
 15e:	06 2e       	mov	r0, r22
 160:	02 c0       	rjmp	.+4      	; 0x166 <_Z10touchProbehhb+0x1a>
 162:	22 0f       	add	r18, r18
 164:	33 1f       	adc	r19, r19
 166:	0a 94       	dec	r0
 168:	e2 f7       	brpl	.-8      	; 0x162 <_Z10touchProbehhb+0x16>
 16a:	92 2f       	mov	r25, r18
 16c:	9e 2b       	or	r25, r30

  // config pins as push-pull output
  //
  TOUCH_DDR |= mask; 
 16e:	50 b3       	in	r21, 0x10	; 16
 170:	59 2b       	or	r21, r25
 172:	50 bb       	out	0x10, r21	; 16
  
  if (dir)
 174:	44 23       	and	r20, r20
 176:	31 f0       	breq	.+12     	; 0x184 <_Z10touchProbehhb+0x38>
  {
    // set partner high to charge the  s&h cap and pin low to discharge touch probe cap
    //
    TOUCH_PORT = (TOUCH_PORT & ~_BV(pin)) | _BV(partner); 
 178:	31 b3       	in	r19, 0x11	; 17
 17a:	e0 95       	com	r30
 17c:	e3 23       	and	r30, r19
 17e:	2e 2b       	or	r18, r30
 180:	21 bb       	out	0x11, r18	; 17
 182:	05 c0       	rjmp	.+10     	; 0x18e <_Z10touchProbehhb+0x42>
  }
  else
  {
    // set pin high to charge the touch probe and pin low to discharge s&h cap cap
    //
    TOUCH_PORT = (PORTF & ~_BV(partner)) | _BV(pin); 
 184:	31 b3       	in	r19, 0x11	; 17
 186:	20 95       	com	r18
 188:	23 23       	and	r18, r19
 18a:	e2 2b       	or	r30, r18
 18c:	e1 bb       	out	0x11, r30	; 17
  }
  
  // charge/discharge s&h cap by connecting it to partner
  //
  ADMUX = MUX_REF_VCC | partner; // select partner as input to the ADC unit
 18e:	60 64       	ori	r22, 0x40	; 64
 190:	ec e7       	ldi	r30, 0x7C	; 124
 192:	f0 e0       	ldi	r31, 0x00	; 0
 194:	60 83       	st	Z, r22
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 196:	af e1       	ldi	r26, 0x1F	; 31
 198:	be e4       	ldi	r27, 0x4E	; 78
 19a:	11 97       	sbiw	r26, 0x01	; 1
 19c:	f1 f7       	brne	.-4      	; 0x19a <_Z10touchProbehhb+0x4e>
 19e:	00 c0       	rjmp	.+0      	; 0x1a0 <_Z10touchProbehhb+0x54>
 1a0:	00 00       	nop
  
  _delay_ms(CHARGE_DELAY); // wait for the touch probe and the s&h cap to be fully charged/dsicharged
  
  TOUCH_DDR &= ~mask;     // config pins as input
 1a2:	20 b3       	in	r18, 0x10	; 16
 1a4:	90 95       	com	r25
 1a6:	29 23       	and	r18, r25
 1a8:	20 bb       	out	0x10, r18	; 16
  TOUCH_PORT &= ~mask;    // disable the internal pullup to make the ports high Z
 1aa:	21 b3       	in	r18, 0x11	; 17
 1ac:	92 23       	and	r25, r18
 1ae:	91 bb       	out	0x11, r25	; 17
  
  // connect touch probe cap to s&h cap to transfer the charge
  //
  ADMUX = MUX_REF_VCC | pin; // select pin as ADC input
 1b0:	80 64       	ori	r24, 0x40	; 64
 1b2:	80 83       	st	Z, r24
 1b4:	8f e1       	ldi	r24, 0x1F	; 31
 1b6:	9e e4       	ldi	r25, 0x4E	; 78
 1b8:	01 97       	sbiw	r24, 0x01	; 1
 1ba:	f1 f7       	brne	.-4      	; 0x1b8 <_Z10touchProbehhb+0x6c>
 1bc:	00 c0       	rjmp	.+0      	; 0x1be <_Z10touchProbehhb+0x72>
 1be:	00 00       	nop
  
  _delay_ms(TRANSFER_DELAY); // wait for charge to be transfered
  
  ADCSRA |= _BV(ADSC);       // start measurement
 1c0:	ea e7       	ldi	r30, 0x7A	; 122
 1c2:	f0 e0       	ldi	r31, 0x00	; 0
 1c4:	80 81       	ld	r24, Z
 1c6:	80 64       	ori	r24, 0x40	; 64
 1c8:	80 83       	st	Z, r24
  
  while ( (ADCSRA & _BV(ADSC)) );   // wait for measurement to complete
 1ca:	80 81       	ld	r24, Z
 1cc:	86 fd       	sbrc	r24, 6
 1ce:	fd cf       	rjmp	.-6      	; 0x1ca <_Z10touchProbehhb+0x7e>
  
  return ADC; // return conversion result
 1d0:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7e0078>
 1d4:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7e0079>
}
 1d8:	08 95       	ret

000001da <_Z10probeTouchv>:
int touchProbeVal;      // store the resulting touch measurement

// Sample current touch. Return 0..31.  The higher the value the more "certain" there is a touch.
//
uint8_t probeTouch(void)
{
 1da:	cf 93       	push	r28
 1dc:	df 93       	push	r29
 1de:	c4 e0       	ldi	r28, 0x04	; 4
 1e0:	d0 e0       	ldi	r29, 0x00	; 0
  //
  for (i = 0; i < 4; i++) 
  {
    // first measurement: charge touch probe, discharge ADC s&h cap, connect the two, measure the voltage
    //
    adc1 += touchProbe(TOUCH_PIN1, TOUCH_PIN2, false);  // accumulate the results for the averaging
 1e2:	40 e0       	ldi	r20, 0x00	; 0
 1e4:	61 e0       	ldi	r22, 0x01	; 1
 1e6:	80 e0       	ldi	r24, 0x00	; 0
 1e8:	0e 94 a6 00 	call	0x14c	; 0x14c <_Z10touchProbehhb>
 1ec:	20 91 05 01 	lds	r18, 0x0105	; 0x800105 <adc1>
 1f0:	30 91 06 01 	lds	r19, 0x0106	; 0x800106 <adc1+0x1>
 1f4:	82 0f       	add	r24, r18
 1f6:	93 1f       	adc	r25, r19
 1f8:	90 93 06 01 	sts	0x0106, r25	; 0x800106 <adc1+0x1>
 1fc:	80 93 05 01 	sts	0x0105, r24	; 0x800105 <adc1>
    
    // second measurement: discharge touch probe, charge ADC s&h cap, connect the two, measure the voltage
    //
    adc2 += touchProbe(TOUCH_PIN1, TOUCH_PIN2, true);   // accumulate the results for the averaging
 200:	41 e0       	ldi	r20, 0x01	; 1
 202:	61 e0       	ldi	r22, 0x01	; 1
 204:	80 e0       	ldi	r24, 0x00	; 0
 206:	0e 94 a6 00 	call	0x14c	; 0x14c <_Z10touchProbehhb>
 20a:	20 91 03 01 	lds	r18, 0x0103	; 0x800103 <adc2>
 20e:	30 91 04 01 	lds	r19, 0x0104	; 0x800104 <adc2+0x1>
 212:	82 0f       	add	r24, r18
 214:	93 1f       	adc	r25, r19
 216:	90 93 04 01 	sts	0x0104, r25	; 0x800104 <adc2+0x1>
 21a:	80 93 03 01 	sts	0x0103, r24	; 0x800103 <adc2>
 21e:	21 97       	sbiw	r28, 0x01	; 1
  int i;
  int16_t idx;
  
  // 4 measurements are taken and averaged to improve noise immunity
  //
  for (i = 0; i < 4; i++) 
 220:	01 f7       	brne	.-64     	; 0x1e2 <_Z10probeTouchv+0x8>
  
  // the value of adc1 (probe charged) gets higher when the probe its touched, the value of adc2 
  // (s&h charged) gets lower when the probe is touched, so, it has to be be subtracted to amplify 
  // the detection accuracy
  //
  touchProbeVal = adc1 - adc2; 
 222:	20 91 05 01 	lds	r18, 0x0105	; 0x800105 <adc1>
 226:	30 91 06 01 	lds	r19, 0x0106	; 0x800106 <adc1+0x1>
 22a:	36 95       	lsr	r19
 22c:	27 95       	ror	r18
 22e:	36 95       	lsr	r19
 230:	27 95       	ror	r18
 232:	96 95       	lsr	r25
 234:	87 95       	ror	r24
 236:	96 95       	lsr	r25
 238:	87 95       	ror	r24
 23a:	a9 01       	movw	r20, r18
 23c:	48 1b       	sub	r20, r24
 23e:	59 0b       	sbc	r21, r25
 240:	ca 01       	movw	r24, r20
 242:	50 93 02 01 	sts	0x0102, r21	; 0x800102 <touchProbeVal+0x1>
 246:	40 93 01 01 	sts	0x0101, r20	; 0x800101 <touchProbeVal>
 24a:	8b 55       	subi	r24, 0x5B	; 91
 24c:	9f 4f       	sbci	r25, 0xFF	; 255
 24e:	12 f4       	brpl	.+4      	; 0x254 <_Z10probeTouchv+0x7a>
 250:	80 e0       	ldi	r24, 0x00	; 0
 252:	90 e0       	ldi	r25, 0x00	; 0
  if (idx < 0) 
  {
    idx= 0; // limit the index!!!
  }
  
  idx /= TOUCH_VALUE_SCALE;                         // scale the index
 254:	65 e0       	ldi	r22, 0x05	; 5
 256:	70 e0       	ldi	r23, 0x00	; 0
 258:	0e 94 ab 01 	call	0x356	; 0x356 <__divmodhi4>
  if (idx > 31) 
  {
    idx= 31;                                        // limit the index!!!
  }
  
  adc1 = 0; // clear the averaging variables for the next run
 25c:	10 92 06 01 	sts	0x0106, r1	; 0x800106 <adc1+0x1>
 260:	10 92 05 01 	sts	0x0105, r1	; 0x800105 <adc1>
  adc2 = 0;
 264:	10 92 04 01 	sts	0x0104, r1	; 0x800104 <adc2+0x1>
 268:	10 92 03 01 	sts	0x0103, r1	; 0x800103 <adc2>
  
  return idx;  // 0..31
 26c:	86 2f       	mov	r24, r22
 26e:	97 2f       	mov	r25, r23
 270:	80 32       	cpi	r24, 0x20	; 32
 272:	91 05       	cpc	r25, r1
 274:	14 f0       	brlt	.+4      	; 0x27a <_Z10probeTouchv+0xa0>
 276:	8f e1       	ldi	r24, 0x1F	; 31
 278:	90 e0       	ldi	r25, 0x00	; 0
}
 27a:	df 91       	pop	r29
 27c:	cf 91       	pop	r28
 27e:	08 95       	ret

00000280 <_Z5setupv>:
/// STANDARD ARDUINO IDE ROUTINES
///

void setup()
{
  outputEnabled = 0;
 280:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <_edata>
  adc1 = 0;
 284:	10 92 06 01 	sts	0x0106, r1	; 0x800106 <adc1+0x1>
 288:	10 92 05 01 	sts	0x0105, r1	; 0x800105 <adc1>
  adc2 = 0;
 28c:	10 92 04 01 	sts	0x0104, r1	; 0x800104 <adc2+0x1>
 290:	10 92 03 01 	sts	0x0103, r1	; 0x800103 <adc2>

  // Call first...  Setup is for both just adc reads in general and for touch.
  //
  adcSetup(SLIDER_PIN);
 294:	87 e0       	ldi	r24, 0x07	; 7
 296:	0e 94 93 00 	call	0x126	; 0x126 <_Z8adcSetuph>
  adcRead(SLIDER_PIN);
 29a:	87 e0       	ldi	r24, 0x07	; 7
 29c:	0e 94 7f 00 	call	0xfe	; 0xfe <_Z7adcReadh>
  
  pwmSetState(PWM_OFF_TRISTATE);
 2a0:	81 e0       	ldi	r24, 0x01	; 1
 2a2:	0e 94 6a 00 	call	0xd4	; 0xd4 <_Z11pwmSetStateh>
 2a6:	08 95       	ret

000002a8 <_Z4loopv>:
}

void loop()
{
 2a8:	cf 93       	push	r28
 2aa:	df 93       	push	r29
  uint16_t adcv;

  // Wait until touch says we have something more than noise.
  //
  if (probeTouch() > 25)
 2ac:	0e 94 ed 00 	call	0x1da	; 0x1da <_Z10probeTouchv>
 2b0:	8a 31       	cpi	r24, 0x1A	; 26
 2b2:	b8 f1       	brcs	.+110    	; 0x322 <_Z4loopv+0x7a>
  {
    adcv = 0;
    
    // Two samples and average...
    //
    adcv += adcRead(SLIDER_PIN) & 0x3FF;
 2b4:	87 e0       	ldi	r24, 0x07	; 7
 2b6:	0e 94 7f 00 	call	0xfe	; 0xfe <_Z7adcReadh>
 2ba:	ec 01       	movw	r28, r24
    adcv += adcRead(SLIDER_PIN) & 0x3FF;
 2bc:	87 e0       	ldi	r24, 0x07	; 7
 2be:	0e 94 7f 00 	call	0xfe	; 0xfe <_Z7adcReadh>
 2c2:	d3 70       	andi	r29, 0x03	; 3
 2c4:	93 70       	andi	r25, 0x03	; 3
 2c6:	c8 0f       	add	r28, r24
 2c8:	d9 1f       	adc	r29, r25
    adcv = adcv / 2;
    
    // Squash down to 0..255 and clamp
    //
    adcv = 0xFF & (adcv >> 2);
 2ca:	d6 95       	lsr	r29
 2cc:	c7 95       	ror	r28
 2ce:	d6 95       	lsr	r29
 2d0:	c7 95       	ror	r28
 2d2:	d6 95       	lsr	r29
 2d4:	c7 95       	ror	r28
    
    // Check that we have at least some significant bits.
    // Fire if we do...
    //
    if ((adcv & 0xF8) > 0)
 2d6:	ce 01       	movw	r24, r28
 2d8:	88 7f       	andi	r24, 0xF8	; 248
 2da:	99 27       	eor	r25, r25
 2dc:	89 2b       	or	r24, r25
 2de:	b9 f0       	breq	.+46     	; 0x30e <_Z4loopv+0x66>
    {
      if (!outputEnabled)
 2e0:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
 2e4:	81 11       	cpse	r24, r1
 2e6:	05 c0       	rjmp	.+10     	; 0x2f2 <_Z4loopv+0x4a>
      {
        pwmSetState(PWM_ENABLED);
 2e8:	0e 94 6a 00 	call	0xd4	; 0xd4 <_Z11pwmSetStateh>
        outputEnabled = 1;
 2ec:	81 e0       	ldi	r24, 0x01	; 1
 2ee:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <_edata>

void pwmOut(int8_t pwmv)
{
  // Fire OCRA with a value 0..255
  //
  OCR1A = pwmv;
 2f2:	dd 27       	eor	r29, r29
 2f4:	cf 3b       	cpi	r28, 0xBF	; 191
 2f6:	d1 05       	cpc	r29, r1
 2f8:	10 f0       	brcs	.+4      	; 0x2fe <_Z4loopv+0x56>
 2fa:	ce eb       	ldi	r28, 0xBE	; 190
 2fc:	d0 e0       	ldi	r29, 0x00	; 0
 2fe:	0c 2e       	mov	r0, r28
 300:	00 0c       	add	r0, r0
 302:	dd 0b       	sbc	r29, r29
 304:	d0 93 89 00 	sts	0x0089, r29	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
 308:	c0 93 88 00 	sts	0x0088, r28	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
 30c:	13 c0       	rjmp	.+38     	; 0x334 <_Z4loopv+0x8c>
    else
    {
      // Drop into tri-state and disable PWM.
      // In tri-state the 15K resistor will shut down the MOSFET.
      //
      if (outputEnabled)
 30e:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
 312:	88 23       	and	r24, r24
 314:	79 f0       	breq	.+30     	; 0x334 <_Z4loopv+0x8c>
      {
        pwmSetState(PWM_OFF_TRISTATE);
 316:	81 e0       	ldi	r24, 0x01	; 1
 318:	0e 94 6a 00 	call	0xd4	; 0xd4 <_Z11pwmSetStateh>
        outputEnabled = 0;
 31c:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <_edata>
 320:	09 c0       	rjmp	.+18     	; 0x334 <_Z4loopv+0x8c>
  }
  else
  {
    // No touch, shutdown as above.
    //
    if (outputEnabled)
 322:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
 326:	88 23       	and	r24, r24
 328:	29 f0       	breq	.+10     	; 0x334 <_Z4loopv+0x8c>
    {
      pwmSetState(PWM_OFF_TRISTATE);
 32a:	81 e0       	ldi	r24, 0x01	; 1
 32c:	0e 94 6a 00 	call	0xd4	; 0xd4 <_Z11pwmSetStateh>
      outputEnabled = 0;
 330:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <_edata>
 334:	2f ef       	ldi	r18, 0xFF	; 255
 336:	80 e7       	ldi	r24, 0x70	; 112
 338:	92 e0       	ldi	r25, 0x02	; 2
 33a:	21 50       	subi	r18, 0x01	; 1
 33c:	80 40       	sbci	r24, 0x00	; 0
 33e:	90 40       	sbci	r25, 0x00	; 0
 340:	e1 f7       	brne	.-8      	; 0x33a <_Z4loopv+0x92>
 342:	00 c0       	rjmp	.+0      	; 0x344 <_Z4loopv+0x9c>
 344:	00 00       	nop
    }
  }
  
  _delay_ms(50); // take 20 measurements per second
}
 346:	df 91       	pop	r29
 348:	cf 91       	pop	r28
 34a:	08 95       	ret

0000034c <main>:
/// AVR VERSION: Simply call Arduino IDE versions of setup() and loop()
///

int main(void)
{
  setup();
 34c:	0e 94 40 01 	call	0x280	; 0x280 <_Z5setupv>

  while (1)
  {
    loop();
 350:	0e 94 54 01 	call	0x2a8	; 0x2a8 <_Z4loopv>
 354:	fd cf       	rjmp	.-6      	; 0x350 <main+0x4>

00000356 <__divmodhi4>:
 356:	97 fb       	bst	r25, 7
 358:	07 2e       	mov	r0, r23
 35a:	16 f4       	brtc	.+4      	; 0x360 <__divmodhi4+0xa>
 35c:	00 94       	com	r0
 35e:	07 d0       	rcall	.+14     	; 0x36e <__divmodhi4_neg1>
 360:	77 fd       	sbrc	r23, 7
 362:	09 d0       	rcall	.+18     	; 0x376 <__divmodhi4_neg2>
 364:	0e 94 bf 01 	call	0x37e	; 0x37e <__udivmodhi4>
 368:	07 fc       	sbrc	r0, 7
 36a:	05 d0       	rcall	.+10     	; 0x376 <__divmodhi4_neg2>
 36c:	3e f4       	brtc	.+14     	; 0x37c <__divmodhi4_exit>

0000036e <__divmodhi4_neg1>:
 36e:	90 95       	com	r25
 370:	81 95       	neg	r24
 372:	9f 4f       	sbci	r25, 0xFF	; 255
 374:	08 95       	ret

00000376 <__divmodhi4_neg2>:
 376:	70 95       	com	r23
 378:	61 95       	neg	r22
 37a:	7f 4f       	sbci	r23, 0xFF	; 255

0000037c <__divmodhi4_exit>:
 37c:	08 95       	ret

0000037e <__udivmodhi4>:
 37e:	aa 1b       	sub	r26, r26
 380:	bb 1b       	sub	r27, r27
 382:	51 e1       	ldi	r21, 0x11	; 17
 384:	07 c0       	rjmp	.+14     	; 0x394 <__udivmodhi4_ep>

00000386 <__udivmodhi4_loop>:
 386:	aa 1f       	adc	r26, r26
 388:	bb 1f       	adc	r27, r27
 38a:	a6 17       	cp	r26, r22
 38c:	b7 07       	cpc	r27, r23
 38e:	10 f0       	brcs	.+4      	; 0x394 <__udivmodhi4_ep>
 390:	a6 1b       	sub	r26, r22
 392:	b7 0b       	sbc	r27, r23

00000394 <__udivmodhi4_ep>:
 394:	88 1f       	adc	r24, r24
 396:	99 1f       	adc	r25, r25
 398:	5a 95       	dec	r21
 39a:	a9 f7       	brne	.-22     	; 0x386 <__udivmodhi4_loop>
 39c:	80 95       	com	r24
 39e:	90 95       	com	r25
 3a0:	bc 01       	movw	r22, r24
 3a2:	cd 01       	movw	r24, r26
 3a4:	08 95       	ret

000003a6 <_exit>:
 3a6:	f8 94       	cli

000003a8 <__stop_program>:
 3a8:	ff cf       	rjmp	.-2      	; 0x3a8 <__stop_program>
